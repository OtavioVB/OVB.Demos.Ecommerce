// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OVB.Demos.Ecommerce.Microsservices.AccountManagement.Infrascructure;

#nullable disable

namespace OVB.Demos.Ecommerce.Microsservices.AccountManagement.Infrascructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230318005419_BaseMigration")]
    partial class BaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountAddressContext.DataTransferObject.AccountAddress", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Country");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Neighborhood");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("CHAR")
                        .HasColumnName("PostalCode")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("State");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StreetName");

                    b.HasKey("Identifier")
                        .HasName("PK_AccountAddress_Identifier");

                    b.HasIndex("PostalCode")
                        .IsUnique()
                        .HasDatabaseName("UK_AccountAddress_PostalCode");

                    b.ToTable("AccountAddresses");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountContext.DataTransferObject.Account", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountAddressIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("AddressComplement");

                    b.Property<Guid>("CorrelationIdentifier")
                        .HasColumnType("UUID")
                        .HasColumnName("CorrelationIdentifier")
                        .IsFixedLength();

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("CHAR")
                        .HasColumnName("Cpf")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralRegistry")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("CHAR")
                        .HasColumnName("GeneralRegistry")
                        .IsFixedLength();

                    b.Property<string>("SourcePlatform")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("SourcePlatform");

                    b.Property<Guid>("TenantIdentifier")
                        .HasColumnType("UUID")
                        .HasColumnName("TenantIdentifier")
                        .IsFixedLength();

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Identifier")
                        .HasName("PK_Account_Identifier");

                    b.HasIndex("AccountAddressIdentifier");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("UK_Account_Cpf");

                    b.HasIndex("UserIdentifier")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountPhoneContext.DataTransferObject.AccountPhone", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("CHAR")
                        .HasColumnName("Phone")
                        .IsFixedLength();

                    b.HasKey("Identifier")
                        .HasName("PK_AccountPhone_Identifier");

                    b.HasIndex("AccountIdentifier");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("UK_AccountPhone_Identifier");

                    b.ToTable("AccountPhones");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.UserContext.DataTransferObject.User", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationIdentifier")
                        .HasColumnType("UUID")
                        .HasColumnName("CorrelationIdentifier")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Email");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsEmailConfirmed")
                        .IsFixedLength();

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Password");

                    b.Property<string>("SourcePlatform")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("SourcePlatform");

                    b.Property<Guid>("TenantIdentifier")
                        .HasColumnType("UUID")
                        .HasColumnName("TenantIdentifier")
                        .IsFixedLength();

                    b.Property<short>("TypeUser")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("TypeUser");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Username");

                    b.HasKey("Identifier")
                        .HasName("PK_User_Identifier");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_User_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("UK_User_Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountContext.DataTransferObject.Account", b =>
                {
                    b.HasOne("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountAddressContext.DataTransferObject.AccountAddress", "AccountAddress")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountAddressIdentifier");

                    b.HasOne("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.UserContext.DataTransferObject.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountContext.DataTransferObject.Account", "UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountPhoneContext.DataTransferObject.AccountPhone", b =>
                {
                    b.HasOne("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountContext.DataTransferObject.Account", "Account")
                        .WithMany("AccountPhones")
                        .HasForeignKey("AccountIdentifier");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountAddressContext.DataTransferObject.AccountAddress", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.AccountContext.DataTransferObject.Account", b =>
                {
                    b.Navigation("AccountPhones");
                });

            modelBuilder.Entity("OVB.Demos.Ecommerce.Microsservices.AccountManagement.Domain.UserContext.DataTransferObject.User", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
